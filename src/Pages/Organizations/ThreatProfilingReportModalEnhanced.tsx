import { useState } from "react";
import Button from "../../components/Common/Button";
import Modal from "../../components/Common/Modal";
import PaymentSection from "../../components/Common/PaymentSection";
import type { 
  ThreatProfilingReport, 
  ThreatLevel, 
  ComplianceFramework,
  ThreatActor,
  Vulnerability,
  ThreatScenario
} from "../../Redux/slices/organizationsSlice";

interface ThreatProfilingReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (report: ThreatProfilingReport) => void;
  editingReport?: ThreatProfilingReport | null;
}

export default function ThreatProfilingReportModal({ 
  isOpen, 
  onClose, 
  onSave, 
  editingReport = null 
}: ThreatProfilingReportModalProps) {
  const [fields, setFields] = useState({
    report_id: editingReport?.report_id || `report_${Date.now()}`,
    version: editingReport?.version || "1.0",
    generated_by: editingReport?.generated_by || "",
    
    // Executive Summary
    overview: editingReport?.executive_summary?.overview || "",
    key_findings: editingReport?.executive_summary?.key_findings?.join(", ") || "",
    recommendations: editingReport?.executive_summary?.recommendations?.join(", ") || "",
    risk_posture: editingReport?.executive_summary?.risk_posture || "medium" as ThreatLevel,
    
    // Organization Context
    business_model: editingReport?.organization_context?.business_model || "",
    critical_assets: editingReport?.organization_context?.critical_assets?.join(", ") || "",
    regulatory_requirements: editingReport?.organization_context?.regulatory_requirements?.join(", ") || "",
    threat_landscape: editingReport?.organization_context?.threat_landscape || "",
    
    // Threat Analysis
    external_facing_assets: editingReport?.threat_analysis?.attack_surface?.external_facing_assets?.join(", ") || "",
    internal_systems: editingReport?.threat_analysis?.attack_surface?.internal_systems?.join(", ") || "",
    third_party_dependencies: editingReport?.threat_analysis?.attack_surface?.third_party_dependencies?.join(", ") || "",
    
    // Risk Assessment
    methodology: editingReport?.risk_assessment?.methodology || "",
    likelihood_scale: editingReport?.risk_assessment?.risk_matrix?.likelihood_scale?.join(", ") || "",
    impact_scale: editingReport?.risk_assessment?.risk_matrix?.impact_scale?.join(", ") || "",
    
    // Sample threat actors, vulnerabilities, and scenarios
    threat_actors_name: "",
    threat_actors_type: "nation_state" as ThreatActor['type'],
    threat_actors_motivation: "",
    threat_actors_capabilities: "",
    
    vulnerabilities_id: "",
    vulnerabilities_description: "",
    vulnerabilities_severity: "medium" as ThreatLevel,
    vulnerabilities_cvss_score: 0,
    
    threat_scenarios_name: "",
    threat_scenarios_description: "",
    threat_scenarios_likelihood: "medium" as ThreatLevel,
    threat_scenarios_impact: "medium" as ThreatLevel,
    threat_scenarios_risk_score: 0,
  });
  
  const [currentSection, setCurrentSection] = useState(0);
  const [error, setError] = useState("");

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target;
    setFields(prev => ({ 
      ...prev, 
      [name]: type === 'number' ? parseFloat(value) || 0 : value 
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    
    if (!fields.report_id || !fields.generated_by) {
      setError("Report ID and generated by are required.");
      return;
    }

    try {
      const currentDate = new Date().toISOString();
      
      const threatActor: ThreatActor = {
        id: `actor_${Date.now()}`,
        name: fields.threat_actors_name || "Sample Actor",
        type: fields.threat_actors_type,
        sophistication: "medium",
        motivation: fields.threat_actors_motivation ? [fields.threat_actors_motivation] : ["Unknown"],
        capabilities: fields.threat_actors_capabilities.split(",").map(c => c.trim()).filter(c => c),
      };

      const vulnerability: Vulnerability = {
        id: fields.vulnerabilities_id || `vuln_${Date.now()}`,
        title: fields.vulnerabilities_description || "Sample vulnerability",
        description: fields.vulnerabilities_description || "Sample vulnerability description",
        severity: fields.vulnerabilities_severity,
        cvss_score: fields.vulnerabilities_cvss_score,
        affected_components: [],
        mitigation_status: "open",
        remediation_steps: [],
      };

      const threatScenario: ThreatScenario = {
        id: `scenario_${Date.now()}`,
        title: fields.threat_scenarios_name || "Sample Scenario",
        description: fields.threat_scenarios_description || "Sample threat scenario",
        threat_actors: [threatActor.id],
        attack_vectors: [],
        likelihood: fields.threat_scenarios_likelihood,
        impact: fields.threat_scenarios_impact,
        risk_level: fields.threat_scenarios_likelihood, // Using likelihood as risk level for simplicity
        mitigation_controls: [],
      };

      const report: ThreatProfilingReport = {
        report_id: fields.report_id,
        version: fields.version,
        generated_at: currentDate,
        generated_by: fields.generated_by,
        
        executive_summary: {
          overview: fields.overview,
          key_findings: fields.key_findings.split(",").map(f => f.trim()).filter(f => f),
          recommendations: fields.recommendations.split(",").map(r => r.trim()).filter(r => r),
          risk_posture: fields.risk_posture,
        },
        
        organization_context: {
          business_model: fields.business_model,
          critical_assets: fields.critical_assets.split(",").map(a => a.trim()).filter(a => a),
          regulatory_requirements: fields.regulatory_requirements.split(",").map(r => r.trim()).filter(r => r) as ComplianceFramework[],
          threat_landscape: fields.threat_landscape,
        },
        
        threat_analysis: {
          threat_actors: [threatActor],
          attack_surface: {
            external_facing_assets: fields.external_facing_assets.split(",").map(a => a.trim()).filter(a => a),
            internal_systems: fields.internal_systems.split(",").map(s => s.trim()).filter(s => s),
            third_party_dependencies: fields.third_party_dependencies.split(",").map(d => d.trim()).filter(d => d),
          },
          vulnerabilities: [vulnerability],
          threat_scenarios: [threatScenario],
        },
        
        risk_assessment: {
          methodology: fields.methodology,
          risk_metrics: {
            total_risks: 0,
            critical_risks: 0,
            high_risks: 0,
            medium_risks: 0,
            low_risks: 0,
            mitigated_risks: 0,
            accepted_risks: 0,
            residual_risk_score: 0,
          },
          risk_matrix: {
            likelihood_scale: fields.likelihood_scale.split(",").map(l => l.trim()).filter(l => l),
            impact_scale: fields.impact_scale.split(",").map(i => i.trim()).filter(i => i),
            risk_levels: {
              "low": "low" as ThreatLevel,
              "medium": "medium" as ThreatLevel,
              "high": "high" as ThreatLevel,
              "critical": "critical" as ThreatLevel,
            },
          },
          top_risks: [],
        },
        
        controls_assessment: {
          frameworks_assessed: [],
          control_effectiveness: {},
        },
        
        recommendations: {
          immediate_actions: [],
          strategic_initiatives: [],
        },
        
        compliance_status: {
          "ISM": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "NIST": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "ISO27001": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "SOC2": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "GDPR": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "E8": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
          "ACSC_ESSENTIAL_EIGHT": { overall_compliance: 0, compliant_controls: 0, non_compliant_controls: 0, gaps: [] },
        },
        
        appendices: {
          methodology_details: "",
          threat_intelligence_sources: [],
          glossary: {},
          references: [],
        },
      };

      onSave(report);
      onClose();
    } catch {
      setError("Failed to create threat profiling report.");
    }
  };

  const sections = [
    { title: "Basic Information", fields: ["report_id", "version", "generated_by"] },
    { title: "Executive Summary", fields: ["overview", "key_findings", "recommendations", "risk_posture"] },
    { title: "Organization Context", fields: ["business_model", "critical_assets", "regulatory_requirements", "threat_landscape"] },
    { title: "Threat Analysis", fields: ["external_facing_assets", "internal_systems", "third_party_dependencies"] },
    { title: "Risk Assessment", fields: ["methodology", "likelihood_scale", "impact_scale"] },
    { title: "Threat Actors", fields: ["threat_actors_name", "threat_actors_type", "threat_actors_motivation", "threat_actors_capabilities"] },
    { title: "Vulnerabilities", fields: ["vulnerabilities_id", "vulnerabilities_description", "vulnerabilities_severity", "vulnerabilities_cvss_score"] },
    { title: "Threat Scenarios", fields: ["threat_scenarios_name", "threat_scenarios_description", "threat_scenarios_likelihood", "threat_scenarios_impact", "threat_scenarios_risk_score"] },
  ];

  const currentSectionFields = sections[currentSection]?.fields || [];

  const nextSection = () => {
    if (currentSection < sections.length - 1) {
      setCurrentSection(currentSection + 1);
    }
  };

  const prevSection = () => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1);
    }
  };

  return (
    <Modal show={isOpen} onClose={onClose} size="2xl">
      <div className="text-white max-h-[90vh] overflow-auto scrollbar-hide">
        <h2 className="text-xl font-bold text-blue-300 mb-4">
          {editingReport ? "Edit Threat Profiling Report" : "Create Threat Profiling Report"}
        </h2>
        
        {/* Section Navigation */}
        <div className="flex space-x-2 mb-6 overflow-x-auto pb-2">
          {sections.map((section, index) => (
            <button
              key={index}
              type="button"
              onClick={() => setCurrentSection(index)}
              className={`px-3 py-1 rounded text-sm whitespace-nowrap ${
                currentSection === index 
                  ? "bg-blue-600 text-white" 
                  : "bg-gray-700 text-gray-300 hover:bg-gray-600"
              }`}
            >
              {section.title}
            </button>
          ))}
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <div className="bg-red-900/20 border border-red-500 text-red-400 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {/* Current Section Fields */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-blue-300 mb-4">
              {sections[currentSection]?.title}
            </h3>
            
            {currentSectionFields.map((fieldName) => {
              const isTextArea = fieldName.includes('overview') || fieldName.includes('description') || 
                               fieldName.includes('landscape') || fieldName.includes('methodology');
              const isSelect = fieldName.includes('type') || fieldName.includes('posture') || 
                              fieldName.includes('severity') || fieldName.includes('likelihood') || 
                              fieldName.includes('impact') || fieldName.includes('approach');
              const isNumber = fieldName.includes('score');

              const getSelectOptions = () => {
                if (fieldName.includes('type') && fieldName.includes('threat_actors')) {
                  return ["nation_state", "cybercriminal", "hacktivist", "insider", "competitor", "terrorist"];
                }
                if (fieldName.includes('posture') || fieldName.includes('severity') || 
                    fieldName.includes('likelihood') || fieldName.includes('impact')) {
                  return ["low", "medium", "high", "critical"];
                }
                if (fieldName.includes('approach')) {
                  return ["questionnaire", "interview", "technical_review", "hybrid"];
                }
                return [];
              };

              return (
                <div key={fieldName} className="space-y-2">
                  <label className="block text-sm font-medium text-gray-300 capitalize">
                    {fieldName.replace(/_/g, ' ')}
                    {["report_id", "generated_by"].includes(fieldName) && " *"}
                  </label>
                  {isTextArea ? (
                    <textarea
                      name={fieldName}
                      value={fields[fieldName as keyof typeof fields] as string}
                      onChange={handleChange}
                      className="w-full p-2 rounded bg-gray-700 border border-blue-900 text-white min-h-[100px]"
                      placeholder={`Enter ${fieldName.replace(/_/g, ' ')}`}
                    />
                  ) : isSelect ? (
                    <select
                      name={fieldName}
                      value={fields[fieldName as keyof typeof fields] as string}
                      onChange={handleChange}
                      className="w-full p-2 rounded bg-gray-700 border border-blue-900 text-white"
                    >
                      {getSelectOptions().map((option) => (
                        <option key={option} value={option}>
                          {option.replace(/_/g, ' ').charAt(0).toUpperCase() + option.replace(/_/g, ' ').slice(1)}
                        </option>
                      ))}
                    </select>
                  ) : (
                    <input
                      type={isNumber ? "number" : "text"}
                      name={fieldName}
                      value={fields[fieldName as keyof typeof fields]}
                      onChange={handleChange}
                      className="w-full p-2 rounded bg-gray-700 border border-blue-900 text-white"
                      placeholder={`Enter ${fieldName.replace(/_/g, ' ')}`}
                      required={["report_id", "generated_by"].includes(fieldName)}
                      min={isNumber ? 0 : undefined}
                      max={isNumber && fieldName.includes('cvss') ? 10 : undefined}
                      step={isNumber ? 0.1 : undefined}
                    />
                  )}
                </div>
              );
            })}
          </div>

          {/* Navigation Buttons */}
          <div className="flex justify-between items-center space-x-4 border-t border-gray-700 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={prevSection}
              disabled={currentSection === 0}
            >
              Previous
            </Button>
            
            <span className="text-gray-400 text-sm">
              {currentSection + 1} of {sections.length}
            </span>
            
            {currentSection === sections.length - 1 ? (
              <div className="flex space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={onClose}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  {editingReport ? "Update Report" : "Create Report"}
                </Button>
              </div>
            ) : (
              <Button
                type="button"
                onClick={nextSection}
              >
                Next
              </Button>
            )}
          </div>

          {/* Payment Section - Only show on the last section */}
          {currentSection === sections.length - 1 && (
            <div className="mt-6 border-t border-gray-700 pt-6">
              <PaymentSection
                paymentData={{
                  amount: 399.99,
                  client_name: "admin",
                  tier: "L2",
                  payment_type: "registration",
                  partner_code: "CYBER20",
                }}
                title="Payment Required - Threat Profiling Report"
                description="Complete your payment to generate the threat profiling report. This comprehensive analysis will provide detailed insights into your organization's threat landscape."
                onPaymentSuccess={() => {
                  console.log("Payment successful for threat profiling report");
                  // You could trigger the report creation here or show a success message
                }}
              />
            </div>
          )}
        </form>
      </div>
    </Modal>
  );
}
