import { useState } from "react";
import Button from "../../components/Common/Button";
import Modal from "../../components/Common/Modal";
import type { 
  ThreatProfilingReport, 
  ThreatLevel, 
  ComplianceFramework,
  ThreatActor,
  Vulnerability,
  ThreatScenario
} from "../../Redux/slices/organizationsSlice";

interface ThreatProfilingReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (report: ThreatProfilingReport) => void;
  editingReport?: ThreatProfilingReport | null;
}

export default function ThreatProfilingReportModal({ 
  isOpen, 
  onClose, 
  onSave, 
  editingReport = null 
}: ThreatProfilingReportModalProps) {
  const [fields, setFields] = useState({
    report_id: editingReport?.report_id || `report_${Date.now()}`,
    version: editingReport?.version || "1.0",
    generated_by: editingReport?.generated_by || "",
    
    // Executive Summary
    overview: editingReport?.executive_summary?.overview || "",
    key_findings: editingReport?.executive_summary?.key_findings?.join(", ") || "",
    recommendations: editingReport?.executive_summary?.recommendations?.join(", ") || "",
    risk_posture: editingReport?.executive_summary?.risk_posture || "medium" as ThreatLevel,
    
    // Organization Context
    business_model: editingReport?.organization_context?.business_model || "",
    critical_assets: editingReport?.organization_context?.critical_assets?.join(", ") || "",
    regulatory_requirements: editingReport?.organization_context?.regulatory_requirements?.join(", ") || "",
    threat_landscape: editingReport?.organization_context?.threat_landscape || "",
    
    // Threat Analysis
    external_facing_assets: editingReport?.threat_analysis?.attack_surface?.external_facing_assets?.join(", ") || "",
    internal_systems: editingReport?.threat_analysis?.attack_surface?.internal_systems?.join(", ") || "",
    third_party_dependencies: editingReport?.threat_analysis?.attack_surface?.third_party_dependencies?.join(", ") || "",
    
    // Risk Assessment
    methodology: editingReport?.risk_assessment?.methodology || "",
    likelihood_scale: editingReport?.risk_assessment?.risk_matrix?.likelihood_scale?.join(", ") || "",
    impact_scale: editingReport?.risk_assessment?.risk_matrix?.impact_scale?.join(", ") || "",
    
    // Compliance
    frameworks_assessed: editingReport?.controls_assessment?.frameworks_assessed?.join(", ") || "",
    
    // Appendices
    methodology_details: editingReport?.appendices?.methodology_details || "",
    threat_intelligence_sources: editingReport?.appendices?.threat_intelligence_sources?.join(", ") || "",
  });
  
  const [threatActors] = useState<ThreatActor[]>(
    editingReport?.threat_analysis?.threat_actors || []
  );
  const [vulnerabilities] = useState<Vulnerability[]>(
    editingReport?.threat_analysis?.vulnerabilities || []
  );
  const [threatScenarios] = useState<ThreatScenario[]>(
    editingReport?.threat_analysis?.threat_scenarios || []
  );
  
  const [currentSection, setCurrentSection] = useState(0);
  const [error, setError] = useState("");

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    setFields(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    
    if (!fields.report_id || !fields.generated_by) {
      setError("Report ID and generated by are required.");
      return;
    }

    try {
      const report: ThreatProfilingReport = {
        report_id: fields.report_id,
        version: fields.version,
        generated_at: new Date().toISOString(),
        generated_by: fields.generated_by,
        
        executive_summary: {
          overview: fields.overview,
          key_findings: fields.key_findings.split(",").map(s => s.trim()).filter(s => s),
          recommendations: fields.recommendations.split(",").map(s => s.trim()).filter(s => s),
          risk_posture: fields.risk_posture as ThreatLevel,
        },
        
        organization_context: {
          business_model: fields.business_model,
          critical_assets: fields.critical_assets.split(",").map(s => s.trim()).filter(s => s),
          regulatory_requirements: fields.regulatory_requirements.split(",").map(s => s.trim()).filter(s => s) as ComplianceFramework[],
          threat_landscape: fields.threat_landscape,
        },
        
        threat_analysis: {
          threat_actors: threatActors,
          threat_scenarios: threatScenarios,
          vulnerabilities: vulnerabilities,
          attack_surface: {
            external_facing_assets: fields.external_facing_assets.split(",").map(s => s.trim()).filter(s => s),
            internal_systems: fields.internal_systems.split(",").map(s => s.trim()).filter(s => s),
            third_party_dependencies: fields.third_party_dependencies.split(",").map(s => s.trim()).filter(s => s),
          },
        },
        
        risk_assessment: {
          methodology: fields.methodology,
          risk_metrics: {
            total_risks: vulnerabilities.length + threatScenarios.length,
            critical_risks: vulnerabilities.filter(v => v.severity === "critical").length,
            high_risks: vulnerabilities.filter(v => v.severity === "high").length,
            medium_risks: vulnerabilities.filter(v => v.severity === "medium").length,
            low_risks: vulnerabilities.filter(v => v.severity === "low").length,
            mitigated_risks: vulnerabilities.filter(v => v.mitigation_status === "mitigated").length,
            accepted_risks: vulnerabilities.filter(v => v.mitigation_status === "accepted").length,
            residual_risk_score: 0, // Calculate based on methodology
          },
          risk_matrix: {
            likelihood_scale: fields.likelihood_scale.split(",").map(s => s.trim()).filter(s => s),
            impact_scale: fields.impact_scale.split(",").map(s => s.trim()).filter(s => s),
            risk_levels: {}, // Can be populated based on matrix
          },
          top_risks: [], // Can be populated from vulnerabilities and scenarios
        },
        
        controls_assessment: {
          frameworks_assessed: fields.frameworks_assessed.split(",").map(s => s.trim()).filter(s => s) as ComplianceFramework[],
          control_effectiveness: {},
        },
        
        recommendations: {
          immediate_actions: [],
          strategic_initiatives: [],
        },
        
        compliance_status: {} as Record<ComplianceFramework, { 
          overall_compliance: number; 
          compliant_controls: number; 
          non_compliant_controls: number; 
          gaps: { control_id: string; gap_description: string; remediation_steps: string[]; }[]; 
        }>,
        
        appendices: {
          methodology_details: fields.methodology_details,
          threat_intelligence_sources: fields.threat_intelligence_sources.split(",").map(s => s.trim()).filter(s => s),
          glossary: {},
          references: [],
        },
      };

      onSave(report);
      onClose();
    } catch {
      setError("Failed to save threat profiling report");
    }
  };

  const inputClasses = "w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500";
  const labelClasses = "block text-sm font-medium text-gray-300 mb-2";

  const sections = [
    "Basic Information",
    "Executive Summary", 
    "Organization Context",
    "Threat Analysis",
    "Risk Assessment",
    "Compliance",
    "Appendices"
  ];

  const renderSection = () => {
    switch (currentSection) {
      case 0: // Basic Information
        return (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className={labelClasses}>Report ID *</label>
                <input
                  type="text"
                  name="report_id"
                  value={fields.report_id}
                  onChange={handleChange}
                  className={inputClasses}
                  required
                />
              </div>
              <div>
                <label className={labelClasses}>Version</label>
                <input
                  type="text"
                  name="version"
                  value={fields.version}
                  onChange={handleChange}
                  className={inputClasses}
                />
              </div>
            </div>
            <div>
              <label className={labelClasses}>Generated By *</label>
              <input
                type="text"
                name="generated_by"
                value={fields.generated_by}
                onChange={handleChange}
                placeholder="Analyst name or system"
                className={inputClasses}
                required
              />
            </div>
          </div>
        );

      case 1: // Executive Summary
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>Overview</label>
              <textarea
                name="overview"
                value={fields.overview}
                onChange={handleChange}
                rows={4}
                className={inputClasses}
                placeholder="Executive overview of the threat profiling assessment"
              />
            </div>
            <div>
              <label className={labelClasses}>Key Findings (comma-separated)</label>
              <textarea
                name="key_findings"
                value={fields.key_findings}
                onChange={handleChange}
                rows={3}
                className={inputClasses}
                placeholder="Finding 1, Finding 2, Finding 3"
              />
            </div>
            <div>
              <label className={labelClasses}>Recommendations (comma-separated)</label>
              <textarea
                name="recommendations"
                value={fields.recommendations}
                onChange={handleChange}
                rows={3}
                className={inputClasses}
                placeholder="Recommendation 1, Recommendation 2, Recommendation 3"
              />
            </div>
            <div>
              <label className={labelClasses}>Risk Posture</label>
              <select
                name="risk_posture"
                value={fields.risk_posture}
                onChange={handleChange}
                className={inputClasses}
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="critical">Critical</option>
              </select>
            </div>
          </div>
        );

      case 2: // Organization Context
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>Business Model</label>
              <textarea
                name="business_model"
                value={fields.business_model}
                onChange={handleChange}
                rows={3}
                className={inputClasses}
                placeholder="Description of the organization's business model"
              />
            </div>
            <div>
              <label className={labelClasses}>Critical Assets (comma-separated)</label>
              <input
                type="text"
                name="critical_assets"
                value={fields.critical_assets}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Customer data, Financial systems, Intellectual property"
              />
            </div>
            <div>
              <label className={labelClasses}>Regulatory Requirements (comma-separated)</label>
              <input
                type="text"
                name="regulatory_requirements"
                value={fields.regulatory_requirements}
                onChange={handleChange}
                className={inputClasses}
                placeholder="ISM, NIST, ISO27001, SOC2, GDPR"
              />
            </div>
            <div>
              <label className={labelClasses}>Threat Landscape</label>
              <textarea
                name="threat_landscape"
                value={fields.threat_landscape}
                onChange={handleChange}
                rows={3}
                className={inputClasses}
                placeholder="Current threat landscape relevant to the organization"
              />
            </div>
          </div>
        );

      case 3: // Threat Analysis
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>External Facing Assets (comma-separated)</label>
              <input
                type="text"
                name="external_facing_assets"
                value={fields.external_facing_assets}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Web servers, Email servers, VPN endpoints"
              />
            </div>
            <div>
              <label className={labelClasses}>Internal Systems (comma-separated)</label>
              <input
                type="text"
                name="internal_systems"
                value={fields.internal_systems}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Domain controllers, Database servers, File servers"
              />
            </div>
            <div>
              <label className={labelClasses}>Third Party Dependencies (comma-separated)</label>
              <input
                type="text"
                name="third_party_dependencies"
                value={fields.third_party_dependencies}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Cloud providers, SaaS applications, Vendors"
              />
            </div>
            <div className="bg-gray-700 rounded-lg p-4 border border-gray-600">
              <h4 className="text-md font-medium text-blue-200 mb-3">
                Threat Actors: {threatActors.length}
              </h4>
              <p className="text-gray-400 text-sm">
                Threat actors, vulnerabilities, and scenarios can be managed separately in detailed forms.
              </p>
            </div>
          </div>
        );

      case 4: // Risk Assessment
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>Methodology</label>
              <textarea
                name="methodology"
                value={fields.methodology}
                onChange={handleChange}
                rows={3}
                className={inputClasses}
                placeholder="Risk assessment methodology used"
              />
            </div>
            <div>
              <label className={labelClasses}>Likelihood Scale (comma-separated)</label>
              <input
                type="text"
                name="likelihood_scale"
                value={fields.likelihood_scale}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Very Low, Low, Medium, High, Very High"
              />
            </div>
            <div>
              <label className={labelClasses}>Impact Scale (comma-separated)</label>
              <input
                type="text"
                name="impact_scale"
                value={fields.impact_scale}
                onChange={handleChange}
                className={inputClasses}
                placeholder="Very Low, Low, Medium, High, Very High"
              />
            </div>
          </div>
        );

      case 5: // Compliance
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>Frameworks Assessed (comma-separated)</label>
              <input
                type="text"
                name="frameworks_assessed"
                value={fields.frameworks_assessed}
                onChange={handleChange}
                className={inputClasses}
                placeholder="ISM, NIST, ISO27001, SOC2, GDPR, E8, ACSC_ESSENTIAL_EIGHT"
              />
            </div>
            <div className="bg-gray-700 rounded-lg p-4 border border-gray-600">
              <h4 className="text-md font-medium text-blue-200 mb-3">
                Control Assessments
              </h4>
              <p className="text-gray-400 text-sm">
                Detailed control assessments and compliance status can be managed separately.
              </p>
            </div>
          </div>
        );

      case 6: // Appendices
        return (
          <div className="space-y-4">
            <div>
              <label className={labelClasses}>Methodology Details</label>
              <textarea
                name="methodology_details"
                value={fields.methodology_details}
                onChange={handleChange}
                rows={4}
                className={inputClasses}
                placeholder="Detailed methodology information"
              />
            </div>
            <div>
              <label className={labelClasses}>Threat Intelligence Sources (comma-separated)</label>
              <input
                type="text"
                name="threat_intelligence_sources"
                value={fields.threat_intelligence_sources}
                onChange={handleChange}
                className={inputClasses}
                placeholder="MITRE ATT&CK, NIST CVE, ACSC, Government advisories"
              />
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Modal show={isOpen} onClose={onClose}>
      <div className="text-white max-h-[80vh] overflow-y-auto">
        <h2 className="text-2xl font-bold text-blue-300 mb-6">
          {editingReport ? "Edit Threat Profiling Report" : "Create Threat Profiling Report"}
        </h2>

        {error && (
          <div className="bg-red-900/20 border border-red-500 text-red-400 px-4 py-3 rounded mb-6">
            {error}
          </div>
        )}

        {/* Section Navigation */}
        <div className="flex flex-wrap gap-2 mb-6">
          {sections.map((section, index) => (
            <button
              key={index}
              type="button"
              onClick={() => setCurrentSection(index)}
              className={`px-3 py-1 rounded text-sm ${
                currentSection === index 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
              }`}
            >
              {section}
            </button>
          ))}
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="bg-gray-700 rounded-lg p-4 border border-gray-600">
            <h3 className="text-lg font-semibold text-blue-300 mb-4">
              {sections[currentSection]}
            </h3>
            {renderSection()}
          </div>

          {/* Navigation and Form Actions */}
          <div className="flex justify-between items-center pt-4">
            <div className="space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}
                disabled={currentSection === 0}
              >
                Previous
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => setCurrentSection(Math.min(sections.length - 1, currentSection + 1))}
                disabled={currentSection === sections.length - 1}
              >
                Next
              </Button>
            </div>
            
            <div className="space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
              >
                Cancel
              </Button>
              <Button type="submit">
                {editingReport ? "Update Report" : "Create Report"}
              </Button>
            </div>
          </div>
        </form>
      </div>
    </Modal>
  );
}
