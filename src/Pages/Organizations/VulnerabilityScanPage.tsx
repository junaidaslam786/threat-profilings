import React, { useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useGetOrgQuery } from "../../Redux/api/organizationsApi";
import Layout from "../../components/Common/Layout";
import Button from "../../components/Common/Button";
import type { ClientDataDto } from "../../Redux/slices/organizationsSlice";

interface Vulnerability {
  id: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low";
  cvss: number;
  description: string;
  affected: string;
  solution: string;
  references: string[];
}

const VulnerabilityScanPage: React.FC = () => {
  const { client_name } = useParams<{ client_name: string }>();
  const navigate = useNavigate();
  const { data: orgData, isLoading } = useGetOrgQuery(client_name!, {
    skip: !client_name,
  });

  const getOrgData = (data: typeof orgData): ClientDataDto | null => {
    if (!data) return null;
    if ("managed_org" in data && data.managed_org) return data.managed_org;
    if ("client_name" in data && "organization_name" in data)
      return data as ClientDataDto;
    return null;
  };

  const org = getOrgData(orgData);

  const [isScanning, setIsScanning] = useState(false);
  const [scanComplete, setScanComplete] = useState(false);
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all");

  // Mock vulnerability data
  const vulnerabilities: Vulnerability[] = [
    {
      id: "CVE-2024-0001",
      title: "SQL Injection in User Authentication",
      severity: "critical",
      cvss: 9.8,
      description:
        "A SQL injection vulnerability exists in the user authentication module that allows attackers to bypass authentication.",
      affected: "Authentication Module v2.1.0",
      solution: "Update to version 2.1.1 or implement parameterized queries",
      references: [
        "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0001",
      ],
    },
    {
      id: "CVE-2024-0002",
      title: "Cross-Site Scripting (XSS) in Dashboard",
      severity: "high",
      cvss: 7.4,
      description:
        "Stored XSS vulnerability in the dashboard component allows execution of malicious scripts.",
      affected: "Dashboard Component v1.5.2",
      solution: "Implement proper input sanitization and output encoding",
      references: [
        "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0002",
      ],
    },
    {
      id: "CVE-2024-0003",
      title: "Insecure Direct Object Reference",
      severity: "medium",
      cvss: 6.5,
      description:
        "Users can access unauthorized resources by manipulating object references.",
      affected: "API Endpoints v3.0.1",
      solution:
        "Implement proper authorization checks for all object references",
      references: [
        "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0003",
      ],
    },
    {
      id: "CVE-2024-0004",
      title: "Weak Password Policy",
      severity: "low",
      cvss: 3.1,
      description:
        "Current password policy allows weak passwords that are susceptible to brute force attacks.",
      affected: "User Management System",
      solution:
        "Implement stronger password requirements and account lockout policies",
      references: [],
    },
  ];

  const runScan = async () => {
    setIsScanning(true);
    // Simulate vulnerability scan
    await new Promise((resolve) => setTimeout(resolve, 4000));
    setIsScanning(false);
    setScanComplete(true);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-red-400 bg-red-500/20 border-red-500/30";
      case "high":
        return "text-orange-400 bg-orange-500/20 border-orange-500/30";
      case "medium":
        return "text-yellow-400 bg-yellow-500/20 border-yellow-500/30";
      case "low":
        return "text-blue-400 bg-blue-500/20 border-blue-500/30";
      default:
        return "text-secondary-400 bg-secondary-500/20 border-secondary-500/30";
    }
  };

  const getCvssColor = (cvss: number) => {
    if (cvss >= 9.0) return "text-red-400";
    if (cvss >= 7.0) return "text-orange-400";
    if (cvss >= 4.0) return "text-yellow-400";
    return "text-blue-400";
  };

  const filteredVulnerabilities =
    selectedSeverity === "all"
      ? vulnerabilities
      : vulnerabilities.filter((v) => v.severity === selectedSeverity);

  const severityCounts = {
    critical: vulnerabilities.filter((v) => v.severity === "critical").length,
    high: vulnerabilities.filter((v) => v.severity === "high").length,
    medium: vulnerabilities.filter((v) => v.severity === "medium").length,
    low: vulnerabilities.filter((v) => v.severity === "low").length,
  };

  if (isLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-96">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
        </div>
      </Layout>
    );
  }

  if (!org) {
    return (
      <Layout>
        <div className="text-center py-12">
          <h2 className="text-2xl font-bold text-white mb-4">
            Organization Not Found
          </h2>
          <Button onClick={() => navigate("/orgs")}>
            Back to Organizations
          </Button>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="max-w-6xl mx-auto">
        <div className="bg-secondary-800/50 rounded-xl border border-secondary-700/30 p-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">
                Vulnerability Scan
              </h1>
              <p className="text-secondary-400">{org.organization_name}</p>
            </div>
            <Button variant="ghost" onClick={() => navigate("/orgs")}>
              Back
            </Button>
          </div>

          {!scanComplete && !isScanning && (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-orange-500/20 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg
                  className="w-12 h-12 text-orange-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                  />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-white mb-4">
                Start Vulnerability Scan
              </h2>
              <p className="text-secondary-400 mb-8 max-w-2xl mx-auto">
                Scan your organization's infrastructure for known
                vulnerabilities, security weaknesses, and potential attack
                vectors.
              </p>
              <Button onClick={runScan}>Start Scan</Button>
            </div>
          )}

          {isScanning && (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary-500 mx-auto mb-6"></div>
              <h2 className="text-2xl font-bold text-white mb-4">
                Scanning for Vulnerabilities
              </h2>
              <p className="text-secondary-400">
                Analyzing your infrastructure for security vulnerabilities...
              </p>
            </div>
          )}

          {scanComplete && (
            <div className="space-y-8">
              {/* Summary Cards */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {Object.entries(severityCounts).map(([severity, count]) => (
                  <div
                    key={severity}
                    className={`p-4 rounded-xl border ${getSeverityColor(
                      severity
                    )}`}
                  >
                    <div className="text-2xl font-bold">{count}</div>
                    <div className="text-sm capitalize">{severity}</div>
                  </div>
                ))}
              </div>

              {/* Filter Controls */}
              <div className="flex items-center space-x-4">
                <span className="text-white font-medium">
                  Filter by severity:
                </span>
                <select
                  value={selectedSeverity}
                  onChange={(e) => setSelectedSeverity(e.target.value)}
                  className="bg-secondary-700 border border-secondary-600 rounded-lg px-3 py-2 text-white"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>

              {/* Vulnerabilities List */}
              <div className="space-y-4">
                {filteredVulnerabilities.map((vuln) => (
                  <div
                    key={vuln.id}
                    className="bg-secondary-700/30 rounded-xl p-6 border border-secondary-600/30"
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 mb-2">
                          <h3 className="text-xl font-semibold text-white">
                            {vuln.title}
                          </h3>
                          <span
                            className={`px-3 py-1 rounded-full text-sm font-medium border ${getSeverityColor(
                              vuln.severity
                            )}`}
                          >
                            {vuln.severity.toUpperCase()}
                          </span>
                        </div>
                        <div className="flex items-center space-x-4 text-sm text-secondary-400 mb-3">
                          <span>{vuln.id}</span>
                          <span>•</span>
                          <span>
                            CVSS:{" "}
                            <span
                              className={`font-bold ${getCvssColor(vuln.cvss)}`}
                            >
                              {vuln.cvss}
                            </span>
                          </span>
                          <span>•</span>
                          <span>Affected: {vuln.affected}</span>
                        </div>
                        <p className="text-secondary-300 mb-4">
                          {vuln.description}
                        </p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="text-sm font-medium text-secondary-300 mb-2">
                          Solution
                        </h4>
                        <p className="text-sm text-secondary-400">
                          {vuln.solution}
                        </p>
                      </div>
                      {vuln.references.length > 0 && (
                        <div>
                          <h4 className="text-sm font-medium text-secondary-300 mb-2">
                            References
                          </h4>
                          <div className="space-y-1">
                            {vuln.references.map((ref, idx) => (
                              <a
                                key={idx}
                                href={ref}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-sm text-primary-400 hover:text-primary-300 block"
                              >
                                {ref}
                              </a>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              {/* Action Buttons */}
              <div className="flex justify-center space-x-4">
                <Button variant="ghost" onClick={() => setScanComplete(false)}>
                  Run New Scan
                </Button>
                <Button onClick={() => console.log("Export vulnerabilities")}>
                  Export Report
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
};

export default VulnerabilityScanPage;
